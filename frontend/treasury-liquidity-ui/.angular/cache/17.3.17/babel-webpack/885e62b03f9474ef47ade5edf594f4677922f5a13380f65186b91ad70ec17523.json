{"ast":null,"code":"import { gql } from 'apollo-angular';\nimport { NgIf } from '@angular/common';\nimport { NgChartsModule } from 'ng2-charts';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"apollo-angular\";\nimport * as i2 from \"ng2-charts\";\nfunction YieldCurveComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r0.error);\n  }\n}\nconst QUERY = gql`query { yieldCurve { term rate } }`;\nexport let YieldCurveComponent = /*#__PURE__*/(() => {\n  class YieldCurveComponent {\n    constructor(apollo) {\n      this.apollo = apollo;\n      this.chartData = {\n        labels: [],\n        datasets: [{\n          data: [],\n          label: 'Par Yield (%)',\n          tension: 0.25,\n          pointRadius: 3\n        }]\n      };\n      this.chartOptions = {\n        responsive: true,\n        scales: {\n          y: {\n            title: {\n              display: true,\n              text: 'Yield (%)'\n            }\n          },\n          x: {\n            title: {\n              display: true,\n              text: 'Maturity'\n            }\n          }\n        },\n        plugins: {\n          legend: {\n            display: false\n          }\n        }\n      };\n    }\n    ngOnInit() {\n      this.apollo.watchQuery({\n        query: QUERY\n      }).valueChanges.subscribe(({\n        data,\n        errors\n      }) => {\n        if (errors && errors.length) {\n          this.error = errors[0].message;\n          return;\n        }\n        const pts = data.yieldCurve;\n        this.chartData = {\n          labels: pts.map(p => p.term),\n          datasets: [{\n            data: pts.map(p => p.rate),\n            label: 'Par Yield (%)',\n            tension: 0.25,\n            pointRadius: 3\n          }]\n        };\n      });\n    }\n    static {\n      this.ɵfac = function YieldCurveComponent_Factory(t) {\n        return new (t || YieldCurveComponent)(i0.ɵɵdirectiveInject(i1.Apollo));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: YieldCurveComponent,\n        selectors: [[\"app-yield-curve\"]],\n        standalone: true,\n        features: [i0.ɵɵStandaloneFeature],\n        decls: 4,\n        vars: 4,\n        consts: [[\"baseChart\", \"\", 3, \"data\", \"type\", \"options\"], [\"class\", \"muted\", 4, \"ngIf\"], [1, \"muted\"]],\n        template: function YieldCurveComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"h2\");\n            i0.ɵɵtext(1, \"Yield Curve\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(2, \"canvas\", 0);\n            i0.ɵɵtemplate(3, YieldCurveComponent_div_3_Template, 2, 1, \"div\", 1);\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"data\", ctx.chartData)(\"type\", \"line\")(\"options\", ctx.chartOptions);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", ctx.error);\n          }\n        },\n        dependencies: [NgIf, NgChartsModule, i2.BaseChartDirective],\n        encapsulation: 2\n      });\n    }\n  }\n  return YieldCurveComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}