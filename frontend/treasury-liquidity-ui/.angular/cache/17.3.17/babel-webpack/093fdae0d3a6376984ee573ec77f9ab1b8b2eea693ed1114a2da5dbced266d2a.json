{"ast":null,"code":"import { NgIf, NgFor } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/forms\";\nconst _c0 = [\"yieldChart\"];\nfunction AppComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r0.yieldError);\n  }\n}\nfunction AppComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Loading yield curve...\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AppComponent_div_8_span_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 21);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const point_r2 = ctx.$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate2(\" \", point_r2.term, \": \", point_r2.rate, \"% \");\n  }\n}\nfunction AppComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\")(2, \"strong\");\n    i0.ɵɵtext(3, \"Current U.S. Treasury Yield Curve:\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"div\", 15);\n    i0.ɵɵelement(5, \"canvas\", 16, 0);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\", 17)(8, \"p\", 18);\n    i0.ɵɵtext(9, \"Quick Reference:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"div\", 19);\n    i0.ɵɵtemplate(11, AppComponent_div_8_span_11_Template, 2, 2, \"span\", 20);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(11);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.yieldData);\n  }\n}\nfunction AppComponent_option_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 22);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const t_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", t_r3);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(t_r3);\n  }\n}\nfunction AppComponent_div_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 23);\n    i0.ɵɵtext(1, \" No orders yet \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AppComponent_table_28_tr_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\", 28);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\", 28);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\", 28);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\", 28);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const order_r4 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.formatDate(order_r4.createdAt));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(order_r4.term);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.formatAmount(order_r4.amount));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", order_r4.rateAtSubmission ? order_r4.rateAtSubmission.toFixed(2) + \"%\" : \"\\u2014\", \" \");\n  }\n}\nfunction AppComponent_table_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"table\", 24)(1, \"thead\")(2, \"tr\", 25)(3, \"th\", 26);\n    i0.ɵɵtext(4, \"When\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"th\", 26);\n    i0.ɵɵtext(6, \"Term\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"th\", 26);\n    i0.ɵɵtext(8, \"Amount\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"th\", 26);\n    i0.ɵɵtext(10, \"Yield at Submission\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(11, \"tbody\");\n    i0.ɵɵtemplate(12, AppComponent_table_28_tr_12_Template, 9, 4, \"tr\", 27);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(12);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.orders);\n  }\n}\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor(http, cdr) {\n      this.http = http;\n      this.cdr = cdr;\n      this.yieldData = [];\n      this.yieldError = '';\n      this.orders = [];\n      this.orderMessage = '';\n      this.terms = ['1M', '2M', '3M', '6M', '1Y', '2Y', '3Y', '5Y', '7Y', '10Y', '20Y', '30Y'];\n      this.selectedTerm = '2Y';\n      this.orderAmount = 1000000;\n    }\n    ngAfterViewInit() {\n      // Chart will be drawn after data loads\n    }\n    ngOnInit() {\n      console.log('AppComponent ngOnInit called');\n      this.loadYieldCurve();\n      this.loadOrders();\n      // Refresh orders every 10 seconds\n      setInterval(() => this.loadOrders(), 10000);\n    }\n    loadYieldCurve() {\n      const query = {\n        query: 'query { yieldCurve { term rate } }'\n      };\n      this.http.post('http://localhost:8080/graphql', query).subscribe({\n        next: response => {\n          this.yieldData = response.data.yieldCurve;\n          this.cdr.detectChanges();\n          setTimeout(() => this.drawYieldCurveChart(), 100); // Draw chart after DOM updates\n        },\n        error: err => {\n          this.yieldError = 'Failed to load yield curve data';\n        }\n      });\n    }\n    drawYieldCurveChart() {\n      if (!this.yieldChart || !this.yieldData?.length) return;\n      const canvas = this.yieldChart.nativeElement;\n      const ctx = canvas.getContext('2d');\n      if (!ctx) return;\n      // Responsive sizing: match CSS size (full width), fixed visible height\n      const dpr = window.devicePixelRatio || 1;\n      const cssWidth = canvas.clientWidth || 800; // fallback\n      const cssHeight = 420;\n      // Set actual pixel buffer for crisp rendering\n      canvas.width = Math.floor(cssWidth * dpr);\n      canvas.height = Math.floor(cssHeight * dpr);\n      ctx.setTransform(dpr, 0, 0, dpr, 0, 0);\n      const data = this.yieldData.map(p => p.rate);\n      const labels = this.yieldData.map(p => p.term);\n      // Clear in CSS pixels (since transform set)\n      ctx.clearRect(0, 0, cssWidth, cssHeight);\n      // Layout\n      const padding = 90; // wider to avoid overlaps on the left/right\n      const chartWidth = cssWidth - 2 * padding;\n      const chartHeight = cssHeight - 2 * padding;\n      // Y scale (fixed)\n      const yAxisMin = 1.0;\n      const yAxisMax = 7.0;\n      const yAxisRange = yAxisMax - yAxisMin;\n      // Background\n      const bgGradient = ctx.createLinearGradient(0, 0, 0, cssHeight);\n      bgGradient.addColorStop(0, '#f8f9fa');\n      bgGradient.addColorStop(1, '#ffffff');\n      ctx.fillStyle = bgGradient;\n      ctx.fillRect(0, 0, cssWidth, cssHeight);\n      // Gridlines\n      ctx.strokeStyle = '#e9ecef';\n      ctx.lineWidth = 1;\n      ctx.setLineDash([2, 4]);\n      for (let percentage = 1; percentage <= 7; percentage++) {\n        const y = cssHeight - padding - (percentage - yAxisMin) / yAxisRange * chartHeight;\n        ctx.beginPath();\n        ctx.moveTo(padding, y);\n        ctx.lineTo(cssWidth - padding, y);\n        ctx.stroke();\n      }\n      for (let i = 0; i < labels.length; i++) {\n        const x = padding + i / (labels.length - 1) * chartWidth;\n        ctx.beginPath();\n        ctx.moveTo(x, padding);\n        ctx.lineTo(x, cssHeight - padding);\n        ctx.stroke();\n      }\n      ctx.setLineDash([]);\n      // Axes\n      ctx.strokeStyle = '#495057';\n      ctx.lineWidth = 2;\n      ctx.beginPath();\n      ctx.moveTo(padding, padding);\n      ctx.lineTo(padding, cssHeight - padding);\n      ctx.lineTo(cssWidth - padding, cssHeight - padding);\n      ctx.stroke();\n      // Area fill\n      const areaGradient = ctx.createLinearGradient(0, padding, 0, cssHeight - padding);\n      areaGradient.addColorStop(0, 'rgba(0, 123, 255, 0.3)');\n      areaGradient.addColorStop(1, 'rgba(0, 123, 255, 0.05)');\n      ctx.fillStyle = areaGradient;\n      ctx.beginPath();\n      ctx.moveTo(padding, cssHeight - padding);\n      const points = [];\n      for (let i = 0; i < data.length; i++) {\n        const x = padding + i / (labels.length - 1) * chartWidth;\n        const y = cssHeight - padding - (data[i] - yAxisMin) / yAxisRange * chartHeight;\n        points.push({\n          x,\n          y,\n          value: data[i]\n        });\n        ctx.lineTo(x, y);\n      }\n      ctx.lineTo(cssWidth - padding, cssHeight - padding);\n      ctx.closePath();\n      ctx.fill();\n      // Line\n      const lineGradient = ctx.createLinearGradient(padding, 0, cssWidth - padding, 0);\n      lineGradient.addColorStop(0, '#28a745');\n      lineGradient.addColorStop(0.3, '#007bff');\n      lineGradient.addColorStop(0.7, '#6f42c1');\n      lineGradient.addColorStop(1, '#dc3545');\n      ctx.strokeStyle = lineGradient;\n      ctx.lineWidth = 4;\n      ctx.lineCap = 'round';\n      ctx.lineJoin = 'round';\n      ctx.beginPath();\n      points.forEach((p, i) => {\n        if (i === 0) ctx.moveTo(p.x, p.y);else ctx.lineTo(p.x, p.y);\n      });\n      ctx.stroke();\n      // Points and labels (with clamping away from axes/curve)\n      points.forEach((p, i) => {\n        // Point\n        ctx.shadowColor = 'rgba(0, 123, 255, 0.6)';\n        ctx.shadowBlur = 8;\n        ctx.fillStyle = '#ffffff';\n        ctx.beginPath();\n        ctx.arc(p.x, p.y, 6, 0, 2 * Math.PI);\n        ctx.fill();\n        ctx.shadowBlur = 0;\n        ctx.fillStyle = '#007bff';\n        ctx.beginPath();\n        ctx.arc(p.x, p.y, 4, 0, 2 * Math.PI);\n        ctx.fill();\n        // Label\n        const labelText = p.value.toFixed(2) + '%';\n        ctx.fillStyle = '#495057';\n        ctx.font = 'bold 12px system-ui';\n        // Default above the point\n        let labelX = p.x;\n        let labelY = p.y - 12;\n        // Edge adjustments\n        if (i === 0) {\n          ctx.textAlign = 'left';\n          labelX = p.x + 10;\n        } else if (i === points.length - 1) {\n          ctx.textAlign = 'right';\n          labelX = p.x - 10;\n        } else {\n          ctx.textAlign = 'center';\n        }\n        // Clamp labels inside chart area and away from axes/curve\n        const minY = padding + 14; // not into top axis\n        const maxY = cssHeight - padding - 14; // not into bottom axis\n        labelY = Math.max(minY, Math.min(maxY, labelY));\n        // Also ensure not too close to the curve: if the label would sit within 8px of the line, move it\n        if (Math.abs(labelY - p.y) < 10) {\n          labelY = p.y - 16; // push a bit further above\n          labelY = Math.max(minY, labelY);\n        }\n        // Keep label away from the left/right axes\n        const minX = padding + 10;\n        const maxX = cssWidth - padding - 10;\n        labelX = Math.max(minX, Math.min(maxX, labelX));\n        ctx.fillText(labelText, labelX, labelY);\n      });\n      // X labels\n      ctx.fillStyle = '#495057';\n      ctx.font = 'bold 13px system-ui';\n      ctx.textAlign = 'center';\n      labels.forEach((lab, i) => {\n        const x = padding + i / (labels.length - 1) * chartWidth;\n        ctx.fillText(lab, x, cssHeight - 25);\n      });\n      // Y labels (1% .. 7%)\n      ctx.font = '12px system-ui';\n      ctx.textAlign = 'right';\n      for (let percentage = 1; percentage <= 7; percentage++) {\n        const y = cssHeight - padding - (percentage - yAxisMin) / yAxisRange * chartHeight;\n        ctx.fillText(percentage + '%', padding - 15, y + 4);\n      }\n      // Title and subtitle\n      ctx.shadowColor = 'rgba(0, 0, 0, 0.1)';\n      ctx.shadowBlur = 2;\n      ctx.shadowOffsetY = 1;\n      ctx.fillStyle = '#212529';\n      ctx.font = 'bold 20px system-ui';\n      ctx.textAlign = 'center';\n      ctx.fillText('U.S. Treasury Yield Curve', cssWidth / 2, 35);\n      ctx.shadowBlur = 0;\n      ctx.fillStyle = '#6c757d';\n      ctx.font = '12px system-ui';\n      const currentDate = new Date().toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      });\n      ctx.fillText(`As of ${currentDate}`, cssWidth / 2, 55);\n      // Axis labels\n      ctx.fillStyle = '#495057';\n      ctx.font = 'bold 14px system-ui';\n      ctx.save();\n      ctx.translate(25, cssHeight / 2);\n      ctx.rotate(-Math.PI / 2);\n      ctx.textAlign = 'center';\n      ctx.fillText('Yield (%)', 0, 0);\n      ctx.restore();\n      ctx.textAlign = 'center';\n      ctx.fillText('Maturity', cssWidth / 2, cssHeight - 5);\n    }\n    loadOrders() {\n      const query = {\n        query: 'query { orders { id term amount createdAt rateAtSubmission } }'\n      };\n      this.http.post('http://localhost:8080/graphql', query).subscribe({\n        next: response => this.orders = response.data.orders.reverse(),\n        error: err => console.error('Failed to load orders:', err)\n      });\n    }\n    submitOrder() {\n      this.orderMessage = 'Submitting order...';\n      const mutation = {\n        query: `mutation { createOrder(input: { term: \"${this.selectedTerm}\", amount: ${this.orderAmount} }) { id term amount createdAt rateAtSubmission } }`\n      };\n      this.http.post('http://localhost:8080/graphql', mutation).subscribe({\n        next: response => {\n          this.orderMessage = '✅ Order submitted successfully';\n          setTimeout(() => this.orderMessage = '', 3000);\n          this.loadOrders(); // Refresh orders\n        },\n        error: err => this.orderMessage = '❌ Failed to submit order'\n      });\n    }\n    formatDate(dateString) {\n      return new Date(dateString).toLocaleString();\n    }\n    formatAmount(amount) {\n      return new Intl.NumberFormat().format(amount);\n    }\n    static {\n      this.ɵfac = function AppComponent_Factory(t) {\n        return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: AppComponent,\n        selectors: [[\"app-root\"]],\n        viewQuery: function AppComponent_Query(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵviewQuery(_c0, 5);\n          }\n          if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.yieldChart = _t.first);\n          }\n        },\n        standalone: true,\n        features: [i0.ɵɵStandaloneFeature],\n        decls: 29,\n        vars: 9,\n        consts: [[\"yieldChart\", \"\"], [2, \"padding\", \"20px\", \"font-family\", \"Arial, sans-serif\"], [2, \"border\", \"1px solid #ccc\", \"padding\", \"15px\", \"margin\", \"20px 0\", \"border-radius\", \"5px\"], [\"style\", \"color: red;\", 4, \"ngIf\"], [4, \"ngIf\"], [2, \"display\", \"flex\", \"gap\", \"15px\", \"align-items\", \"end\", 3, \"ngSubmit\"], [2, \"display\", \"flex\", \"flex-direction\", \"column\"], [\"name\", \"term\", 2, \"padding\", \"5px\", \"margin-top\", \"5px\", 3, \"ngModelChange\", \"ngModel\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"name\", \"amount\", \"type\", \"number\", \"min\", \"1\", \"step\", \"1000\", \"placeholder\", \"1000000\", 2, \"padding\", \"5px\", \"margin-top\", \"5px\", 3, \"ngModelChange\", \"ngModel\"], [\"type\", \"submit\", 2, \"padding\", \"8px 16px\", \"background\", \"#007bff\", \"color\", \"white\", \"border\", \"none\", \"border-radius\", \"3px\"], [2, \"margin-top\", \"10px\", \"color\", \"#666\"], [\"style\", \"text-align: center; color: #666; padding: 20px;\", 4, \"ngIf\"], [\"style\", \"width: 100%; border-collapse: collapse;\", 4, \"ngIf\"], [2, \"color\", \"red\"], [2, \"margin\", \"20px 0\"], [2, \"width\", \"100%\", \"height\", \"420px\", \"border\", \"1px solid #ddd\", \"border-radius\", \"3px\", \"background\", \"white\"], [2, \"margin-top\", \"15px\"], [2, \"font-size\", \"14px\", \"color\", \"#666\", \"margin-bottom\", \"10px\"], [2, \"display\", \"flex\", \"flex-wrap\", \"wrap\", \"gap\", \"10px\"], [\"style\", \"background: #f0f0f0; padding: 5px 10px; border-radius: 3px; color: #333; border: 1px solid #ddd; font-size: 12px;\", 4, \"ngFor\", \"ngForOf\"], [2, \"background\", \"#f0f0f0\", \"padding\", \"5px 10px\", \"border-radius\", \"3px\", \"color\", \"#333\", \"border\", \"1px solid #ddd\", \"font-size\", \"12px\"], [3, \"value\"], [2, \"text-align\", \"center\", \"color\", \"#666\", \"padding\", \"20px\"], [2, \"width\", \"100%\", \"border-collapse\", \"collapse\"], [2, \"background-color\", \"#f5f5f5\"], [2, \"border\", \"1px solid #ccc\", \"padding\", \"8px\", \"text-align\", \"left\"], [4, \"ngFor\", \"ngForOf\"], [2, \"border\", \"1px solid #ccc\", \"padding\", \"8px\"]],\n        template: function AppComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 1)(1, \"h1\");\n            i0.ɵɵtext(2, \"\\uD83C\\uDFE6 Treasury Liquidity Desk\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(3, \"div\", 2)(4, \"h2\");\n            i0.ɵɵtext(5, \"Yield Curve\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(6, AppComponent_div_6_Template, 2, 1, \"div\", 3)(7, AppComponent_div_7_Template, 2, 0, \"div\", 4)(8, AppComponent_div_8_Template, 12, 1, \"div\", 4);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(9, \"div\", 2)(10, \"h2\");\n            i0.ɵɵtext(11, \"Submit Order\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(12, \"form\", 5);\n            i0.ɵɵlistener(\"ngSubmit\", function AppComponent_Template_form_ngSubmit_12_listener() {\n              return ctx.submitOrder();\n            });\n            i0.ɵɵelementStart(13, \"label\", 6);\n            i0.ɵɵtext(14, \" Term: \");\n            i0.ɵɵelementStart(15, \"select\", 7);\n            i0.ɵɵtwoWayListener(\"ngModelChange\", function AppComponent_Template_select_ngModelChange_15_listener($event) {\n              i0.ɵɵtwoWayBindingSet(ctx.selectedTerm, $event) || (ctx.selectedTerm = $event);\n              return $event;\n            });\n            i0.ɵɵtemplate(16, AppComponent_option_16_Template, 2, 2, \"option\", 8);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(17, \"label\", 6);\n            i0.ɵɵtext(18, \" Amount (USD): \");\n            i0.ɵɵelementStart(19, \"input\", 9);\n            i0.ɵɵtwoWayListener(\"ngModelChange\", function AppComponent_Template_input_ngModelChange_19_listener($event) {\n              i0.ɵɵtwoWayBindingSet(ctx.orderAmount, $event) || (ctx.orderAmount = $event);\n              return $event;\n            });\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(20, \"button\", 10);\n            i0.ɵɵtext(21, \" Place Order \");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(22, \"div\", 11);\n            i0.ɵɵtext(23);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(24, \"div\", 2)(25, \"h2\");\n            i0.ɵɵtext(26, \"Order History\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(27, AppComponent_div_27_Template, 2, 0, \"div\", 12)(28, AppComponent_table_28_Template, 13, 1, \"table\", 13);\n            i0.ɵɵelementEnd()();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(6);\n            i0.ɵɵproperty(\"ngIf\", ctx.yieldError);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", !ctx.yieldError && (ctx.yieldData == null ? null : ctx.yieldData.length) === 0);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", ctx.yieldData && ctx.yieldData.length > 0);\n            i0.ɵɵadvance(7);\n            i0.ɵɵtwoWayProperty(\"ngModel\", ctx.selectedTerm);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngForOf\", ctx.terms);\n            i0.ɵɵadvance(3);\n            i0.ɵɵtwoWayProperty(\"ngModel\", ctx.orderAmount);\n            i0.ɵɵadvance(4);\n            i0.ɵɵtextInterpolate(ctx.orderMessage);\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"ngIf\", ctx.orders.length === 0);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", ctx.orders.length > 0);\n          }\n        },\n        dependencies: [NgIf, NgFor, FormsModule, i2.ɵNgNoValidate, i2.NgSelectOption, i2.ɵNgSelectMultipleOption, i2.DefaultValueAccessor, i2.NumberValueAccessor, i2.SelectControlValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.MinValidator, i2.NgModel, i2.NgForm],\n        encapsulation: 2\n      });\n    }\n  }\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}