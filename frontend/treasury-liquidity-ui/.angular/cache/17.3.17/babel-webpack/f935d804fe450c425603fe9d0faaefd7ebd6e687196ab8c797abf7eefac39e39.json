{"ast":null,"code":"import { __spreadArray } from \"tslib\";\nimport { Slot } from \"optimism\";\nimport { invariant, global as untypedGlobal } from \"../globals/index.js\";\nvar muteAllDeprecations = Symbol.for(\"apollo.deprecations\");\nvar global = untypedGlobal;\nvar slot = new Slot();\nfunction isMuted(name) {\n  return global[muteAllDeprecations] || (slot.getValue() || []).includes(name);\n}\nexport function muteDeprecations(name) {\n  var args = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    args[_i - 1] = arguments[_i];\n  }\n  return slot.withValue.apply(slot, __spreadArray([Array.isArray(name) ? name : [name]], args, false));\n}\nexport function warnRemovedOption(options, name, callSite, recommendation) {\n  if (recommendation === void 0) {\n    recommendation = \"Please remove this option.\";\n  }\n  warnDeprecated(name, function () {\n    if (name in options) {\n      globalThis.__DEV__ !== false && invariant.warn(104, callSite, name, recommendation);\n    }\n  });\n}\nexport function warnDeprecated(name, cb) {\n  if (!isMuted(name)) {\n    cb();\n  }\n}\nexport function withDisabledDeprecations() {\n  var _a;\n  var prev = global[muteAllDeprecations];\n  global[muteAllDeprecations] = true;\n  return _a = {}, _a[Symbol.dispose] = function () {\n    global[muteAllDeprecations] = prev;\n  }, _a;\n}\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}