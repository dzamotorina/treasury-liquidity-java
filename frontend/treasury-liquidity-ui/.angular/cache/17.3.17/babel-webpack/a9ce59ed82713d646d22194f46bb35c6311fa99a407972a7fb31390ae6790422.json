{"ast":null,"code":"import { NgIf } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nfunction YieldCurveComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"canvas\", 2);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction YieldCurveComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r0.error);\n  }\n}\nfunction YieldCurveComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Loading yield curve...\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport let YieldCurveComponent = /*#__PURE__*/(() => {\n  class YieldCurveComponent {\n    constructor(http) {\n      this.http = http;\n      this.chartData = {\n        labels: [],\n        datasets: []\n      };\n    }\n    ngOnInit() {\n      const query = {\n        query: 'query { yieldCurve { term rate } }'\n      };\n      this.http.post('http://localhost:8080/graphql', query).subscribe({\n        next: response => {\n          const pts = response.data.yieldCurve;\n          this.chartData = {\n            labels: pts.map(p => p.term),\n            datasets: [{\n              data: pts.map(p => p.rate),\n              label: 'Par Yield (%)'\n            }]\n          };\n          setTimeout(() => this.drawSimpleChart(), 100);\n        },\n        error: err => this.error = 'Failed to load yield curve data'\n      });\n    }\n    drawSimpleChart() {\n      const canvas = document.getElementById('yieldChart');\n      if (!canvas) return;\n      const ctx = canvas.getContext('2d');\n      if (!ctx) return;\n      const data = this.chartData.datasets[0].data;\n      const labels = this.chartData.labels;\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      // Chart area\n      const padding = 40;\n      const chartWidth = canvas.width - 2 * padding;\n      const chartHeight = canvas.height - 2 * padding;\n      // Find min/max for scaling\n      const maxVal = Math.max(...data);\n      const minVal = Math.min(...data);\n      const range = maxVal - minVal;\n      // Draw axes\n      ctx.strokeStyle = '#333';\n      ctx.lineWidth = 1;\n      ctx.beginPath();\n      ctx.moveTo(padding, padding);\n      ctx.lineTo(padding, canvas.height - padding);\n      ctx.lineTo(canvas.width - padding, canvas.height - padding);\n      ctx.stroke();\n      // Draw line chart\n      ctx.strokeStyle = 'blue';\n      ctx.lineWidth = 2;\n      ctx.beginPath();\n      for (let i = 0; i < data.length; i++) {\n        const x = padding + i / (data.length - 1) * chartWidth;\n        const y = canvas.height - padding - (data[i] - minVal) / range * chartHeight;\n        if (i === 0) ctx.moveTo(x, y);else ctx.lineTo(x, y);\n        // Draw points\n        ctx.fillStyle = 'red';\n        ctx.fillRect(x - 2, y - 2, 4, 4);\n      }\n      ctx.stroke();\n      // Draw labels\n      ctx.fillStyle = 'black';\n      ctx.font = '12px Arial';\n      ctx.textAlign = 'center';\n      for (let i = 0; i < labels.length; i++) {\n        const x = padding + i / (labels.length - 1) * chartWidth;\n        ctx.fillText(labels[i], x, canvas.height - 5);\n      }\n      // Draw Y-axis labels\n      ctx.textAlign = 'right';\n      for (let i = 0; i <= 5; i++) {\n        const y = canvas.height - padding - i / 5 * chartHeight;\n        const value = minVal + i / 5 * range;\n        ctx.fillText(value.toFixed(2) + '%', padding - 5, y + 3);\n      }\n    }\n    static {\n      this.ɵfac = function YieldCurveComponent_Factory(t) {\n        return new (t || YieldCurveComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: YieldCurveComponent,\n        selectors: [[\"app-yield-curve\"]],\n        standalone: true,\n        features: [i0.ɵɵStandaloneFeature],\n        decls: 5,\n        vars: 3,\n        consts: [[4, \"ngIf\"], [\"class\", \"muted\", 4, \"ngIf\"], [\"id\", \"yieldChart\", \"width\", \"600\", \"height\", \"300\", 2, \"border\", \"1px solid #ccc\"], [1, \"muted\"]],\n        template: function YieldCurveComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"h2\");\n            i0.ɵɵtext(1, \"Yield Curve\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(2, YieldCurveComponent_div_2_Template, 2, 0, \"div\", 0)(3, YieldCurveComponent_div_3_Template, 2, 1, \"div\", 1)(4, YieldCurveComponent_div_4_Template, 2, 0, \"div\", 0);\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngIf\", !ctx.error && ctx.chartData.labels && ctx.chartData.labels.length > 0);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", ctx.error);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", !ctx.error && (!ctx.chartData.labels || ctx.chartData.labels.length === 0));\n          }\n        },\n        dependencies: [NgIf],\n        encapsulation: 2\n      });\n    }\n  }\n  return YieldCurveComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}